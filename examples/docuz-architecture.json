{
  "metadata": {
    "name": "Docuz - Interactive Architecture Documentation Generator",
    "projectName": "Docuz",
    "description": "A sophisticated Node.js tool that converts JSON architecture definitions into beautiful, interactive HTML visualizations using Cytoscape.js. Creates self-contained HTML files with embedded styling and interactivity for offline architecture documentation.",
    "version": "0.1.0",
    "summary": "Docuz transforms complex software architecture definitions into stunning, interactive web visualizations. Simply provide a JSON file describing your system components and relationships, and Docuz generates a professional HTML documentation site with clickable diagrams, hierarchical navigation, and detailed component specifications - all in a single file that works offline.",
    "documentation": {
      "overview": "Docuz is a lightweight, framework-agnostic documentation generator that transforms structured JSON architecture definitions into rich, interactive HTML visualizations. It leverages Cytoscape.js for graph rendering, supports hierarchical navigation, and generates completely self-contained HTML files that work offline.",
      "installation": "npm install - Requires Node.js 14.0.0 or higher. Only dependency is fs-extra for enhanced file operations.",
      "usage": "node generate.js <input.json> <output.html> - Takes JSON architecture file and generates interactive HTML documentation with optional documentation page.",
      "features": [
        "Interactive graph visualization with Cytoscape.js",
        "Hierarchical component navigation with drill-down/up",
        "Self-contained HTML output with embedded assets",
        "Dark/light theme support with persistence",
        "Responsive design for desktop and mobile",
        "Rich component details with hover tooltips",
        "Template-based generation system",
        "JSON schema validation and error handling"
      ],
      "architecture_principles": [
        "Single Responsibility - Each component has a clear, focused purpose",
        "Template-driven - Uses modular HTML/CSS/JS templates for flexibility",
        "Self-contained output - Generated files work completely offline",
        "Progressive enhancement - Core functionality with enhanced interactivity",
        "Error resilience - Comprehensive validation and error handling",
        "Performance focused - Synchronous operations for build-time generation"
      ],
      "technical_stack": [
        "Node.js - Runtime environment and core processing",
        "Cytoscape.js - Graph visualization and interaction engine",
        "Dagre - Hierarchical graph layout algorithm",
        "HTML5/CSS3 - Modern web standards for presentation",
        "ES6+ JavaScript - Modern language features",
        "Template literals - Dynamic content injection system"
      ]
    }
  },
  "nodes": [
    {
      "id": "cli-interface",
      "data": {
        "label": "CLI Interface",
        "type": "entry",
        "details": {
          "summary": "Command-line interface and main entry point for the architecture documentation generator",
          "signature": "node generate.js <input.json> <output.html>",
          "working": "Parses command-line arguments, validates input parameters, displays help information, and orchestrates the entire documentation generation process. Handles error conditions gracefully and provides user feedback throughout the generation process.",
          "responsibilities": [
            "Command-line argument parsing and validation",
            "Help message display and usage instructions",
            "Error handling and user feedback",
            "Process lifecycle management"
          ],
          "technologies": ["Node.js process module", "Command-line argument parsing"],
          "inputs": [
            {"name": "Input JSON Path", "description": "Path to architecture JSON definition file", "format": "String"},
            {"name": "Output HTML Path", "description": "Destination path for generated HTML file", "format": "String"},
            {"name": "CLI Flags", "description": "Help and option flags", "format": "Array"}
          ],
          "outputs": [
            {"name": "Process Exit Code", "description": "Success (0) or error (1) exit codes", "format": "Number"},
            {"name": "Console Output", "description": "Progress messages and error information", "format": "String"}
          ],
          "implementation_details": {
            "key_functions": ["main()", "showHelp()", "process.argv parsing"],
            "dependencies": ["process.argv", "console"],
            "error_handling": "Try-catch blocks with process.exit(1) on errors",
            "performance_considerations": "Lightweight argument processing with immediate validation"
          }
        }
      }
    },
    {
      "id": "architecture-doc-generator",
      "data": {
        "label": "ArchitectureDocGenerator",
        "type": "backend",
        "details": {
          "summary": "Core orchestration class that coordinates the entire documentation generation pipeline",
          "signature": "class ArchitectureDocGenerator { async generate(jsonPath, outputPath) }",
          "working": "Main controller that orchestrates the complete documentation generation workflow. Initializes directory structure, coordinates data loading, template processing, HTML generation, and file output. Manages error handling and provides comprehensive logging throughout the process.",
          "responsibilities": [
            "Overall process orchestration and workflow management",
            "Directory structure initialization and validation",
            "Error handling and logging coordination",
            "Progress tracking and user feedback",
            "Output file management and optimization"
          ],
          "technologies": ["Node.js classes", "Async/await patterns", "File system operations"],
          "inputs": [
            {"name": "JSON File Path", "description": "Path to input architecture definition", "format": "String"},
            {"name": "Output Path", "description": "Destination for generated HTML files", "format": "String"}
          ],
          "outputs": [
            {"name": "HTML Files", "description": "Generated architecture and documentation HTML files", "format": "HTML"},
            {"name": "Console Logs", "description": "Progress and completion messages", "format": "String"}
          ],
          "implementation_details": {
            "key_functions": ["generate()", "displaySummary()", "constructor()"],
            "dependencies": ["fs", "path"],
            "error_handling": "Comprehensive try-catch with detailed error messages",
            "performance_considerations": "Sequential processing for reliability, file size optimization"
          }
        }
      }
    },
    {
      "id": "data-loader-validator",
      "data": {
        "label": "Data Loader & Validator",
        "type": "backend",
        "details": {
          "summary": "Handles architecture JSON file loading, parsing, and comprehensive schema validation",
          "signature": "loadArchitectureData(jsonPath) -> Object, validateArchitectureData(data) -> void",
          "working": "Reads JSON files from disk, parses content with error handling, and performs extensive validation of the architecture data structure. Validates required fields, node references, edge consistency, and hierarchy integrity. Provides detailed error messages for debugging invalid data structures.",
          "responsibilities": [
            "JSON file reading and parsing with error handling",
            "Schema validation for nodes, edges, and hierarchy",
            "Cross-reference validation between components",
            "Data integrity verification and constraint checking",
            "Detailed error reporting for invalid data"
          ],
          "technologies": ["Node.js fs module", "JSON parsing", "Data validation patterns"],
          "inputs": [
            {"name": "JSON File Path", "description": "File system path to architecture JSON", "format": "String"},
            {"name": "Raw JSON Content", "description": "String content from file", "format": "String"}
          ],
          "outputs": [
            {"name": "Validated Data Object", "description": "Parsed and validated architecture data", "format": "Object"},
            {"name": "Validation Errors", "description": "Detailed error messages for invalid data", "format": "Error"}
          ],
          "implementation_details": {
            "key_functions": ["loadArchitectureData()", "validateArchitectureData()", "JSON.parse()"],
            "dependencies": ["fs", "JSON", "Error handling"],
            "error_handling": "Multiple validation layers with specific error messages",
            "performance_considerations": "Single-pass validation with early exit on critical errors"
          }
        }
      }
    },
    {
      "id": "template-processor",
      "data": {
        "label": "Template Processing Engine",
        "type": "backend",
        "details": {
          "summary": "Core template processing system that merges JSON architecture data with HTML templates",
          "signature": "loadTemplates() -> Object, generateHTML(data, templates) -> String",
          "working": "Loads HTML templates from the templates/ directory, performs placeholder replacement using template literals, injects CSS/JavaScript assets, and generates complete self-contained HTML files. Handles both main visualization view and detailed documentation pages with dynamic content injection.",
          "responsibilities": [
            "Template file loading and validation",
            "Placeholder replacement and data injection",
            "CSS/JavaScript asset embedding",
            "Output file generation and optimization",
            "Documentation page generation with component details"
          ],
          "technologies": ["Node.js fs module", "Template literals", "String replacement", "Asset embedding"],
          "inputs": [
            {"name": "Template Files", "description": "HTML template files with placeholders", "format": "HTML"},
            {"name": "Architecture Data", "description": "Validated JSON architecture definition", "format": "Object"},
            {"name": "Asset Files", "description": "CSS and JavaScript assets", "format": "String"}
          ],
          "outputs": [
            {"name": "Generated HTML", "description": "Complete HTML files with embedded assets", "format": "HTML"},
            {"name": "Documentation HTML", "description": "Detailed component documentation pages", "format": "HTML"}
          ],
          "implementation_details": {
            "key_functions": ["loadTemplates()", "generateHTML()", "generateDocumentation()", "replaceplaceholders()"],
            "dependencies": ["fs", "path", "String methods"],
            "error_handling": "Template validation with fallback error messages",
            "performance_considerations": "Synchronous file operations for build-time generation, string optimization"
          }
        }
      }
    },
    {
      "id": "visualization-engine",
      "data": {
        "label": "Cytoscape Visualization Engine",
        "type": "frontend",
        "details": {
          "summary": "Interactive graph visualization system powered by Cytoscape.js with hierarchical navigation",
          "signature": "class ArchitectureViewer { constructor(containerId, data) }",
          "working": "Creates interactive graph visualizations using Cytoscape.js with Dagre layout algorithms. Provides hierarchical navigation, component interaction, hover effects, and progressive disclosure. Manages graph state, handles user interactions, and updates the UI dynamically based on user actions.",
          "responsibilities": [
            "Graph initialization and configuration",
            "Interactive node and edge rendering",
            "Hierarchical navigation and level management",
            "User interaction handling (hover, click, drag)",
            "Dynamic layout and positioning algorithms",
            "State management for expanded/collapsed nodes"
          ],
          "technologies": ["Cytoscape.js", "Dagre layout", "DOM manipulation", "Event handling"],
          "inputs": [
            {"name": "Architecture Data", "description": "JSON data embedded in HTML", "format": "Object"},
            {"name": "Container Element", "description": "DOM element for graph rendering", "format": "HTMLElement"},
            {"name": "User Interactions", "description": "Mouse and keyboard events", "format": "Events"}
          ],
          "outputs": [
            {"name": "Interactive Graph", "description": "Rendered Cytoscape.js visualization", "format": "Visual"},
            {"name": "State Updates", "description": "UI state changes and navigation updates", "format": "DOM"}
          ],
          "implementation_details": {
            "key_functions": ["setupCytoscape()", "processArchitectureData()", "setupEventHandlers()", "calculateMaxLevel()"],
            "dependencies": ["Cytoscape.js", "cytoscapeDagre", "DOM APIs"],
            "error_handling": "Graceful degradation with library loading checks",
            "performance_considerations": "Efficient graph rendering with optimized layouts"
          }
        }
      }
    },
    {
      "id": "theme-management",
      "data": {
        "label": "Theme Management System",
        "type": "frontend",
        "details": {
          "summary": "Dark/light theme system with user preference persistence and dynamic styling",
          "signature": "toggleTheme() -> void, CSS custom properties",
          "working": "Manages application theming through CSS custom properties and data attributes. Provides seamless dark/light mode switching with user preference persistence in localStorage. Dynamically updates colors, styles, and visual elements across the entire application interface.",
          "responsibilities": [
            "Theme state management and persistence",
            "Dynamic CSS variable updates",
            "User preference storage in localStorage",
            "Visual element state synchronization",
            "Theme toggle UI controls"
          ],
          "technologies": ["CSS custom properties", "localStorage API", "DOM manipulation", "CSS-in-JS"],
          "inputs": [
            {"name": "User Theme Toggle", "description": "Theme switch user interactions", "format": "Event"},
            {"name": "Stored Preferences", "description": "Previously saved theme preferences", "format": "String"}
          ],
          "outputs": [
            {"name": "Theme State", "description": "Applied theme configuration", "format": "CSS"},
            {"name": "Visual Updates", "description": "Updated interface appearance", "format": "DOM"}
          ],
          "implementation_details": {
            "key_functions": ["toggleTheme()", "loadSavedTheme()", "updateThemeIcon()"],
            "dependencies": ["localStorage", "CSS custom properties", "document.documentElement"],
            "error_handling": "Fallback to default theme on storage errors",
            "performance_considerations": "CSS-native theming for optimal performance"
          }
        }
      }
    },
    {
      "id": "component-details-system",
      "data": {
        "label": "Component Details System",
        "type": "frontend",
        "details": {
          "summary": "Dynamic sidebar system that displays detailed component information and navigation",
          "signature": "updateComponentDetails(component) -> void, generateComponentHTML(details) -> String",
          "working": "Manages the sidebar interface that shows detailed information about selected or hovered components. Dynamically generates HTML content for component details, handles navigation breadcrumbs, and provides interactive component exploration with formatted display of technical specifications.",
          "responsibilities": [
            "Dynamic sidebar content generation",
            "Component detail formatting and display",
            "Navigation breadcrumb management",
            "Interactive component exploration",
            "Technical specification presentation"
          ],
          "technologies": ["DOM manipulation", "Template literals", "Event delegation", "CSS styling"],
          "inputs": [
            {"name": "Component Data", "description": "Selected component information", "format": "Object"},
            {"name": "Navigation State", "description": "Current navigation path", "format": "Array"},
            {"name": "User Interactions", "description": "Component selection events", "format": "Events"}
          ],
          "outputs": [
            {"name": "Sidebar Content", "description": "Formatted component details HTML", "format": "HTML"},
            {"name": "Navigation UI", "description": "Updated breadcrumb and controls", "format": "DOM"}
          ],
          "implementation_details": {
            "key_functions": ["updateComponentDetails()", "generateComponentHTML()", "updateBreadcrumb()"],
            "dependencies": ["DOM APIs", "Template rendering", "Event handling"],
            "error_handling": "Graceful handling of missing component data",
            "performance_considerations": "Efficient DOM updates with minimal reflows"
          }
        }
      }
    },
    {
      "id": "file-operations-manager",
      "data": {
        "label": "File Operations Manager",
        "type": "utility",
        "details": {
          "summary": "Handles all file system operations including reading, writing, and directory management",
          "signature": "writeOutputFile(path, content) -> void, ensureDirectory(path) -> void",
          "working": "Manages all file system interactions including template loading, output file writing, and directory creation. Ensures proper file handling with error checking, creates necessary directory structures, and optimizes file output with size tracking and validation.",
          "responsibilities": [
            "File reading and writing operations",
            "Directory structure creation and validation",
            "File size optimization and tracking",
            "Template file loading and caching",
            "Output path management and resolution"
          ],
          "technologies": ["Node.js fs module", "Path manipulation", "File system APIs"],
          "inputs": [
            {"name": "File Paths", "description": "Input and output file system paths", "format": "String"},
            {"name": "File Content", "description": "Data to write to files", "format": "String/Buffer"},
            {"name": "Directory Paths", "description": "Directories to create or validate", "format": "String"}
          ],
          "outputs": [
            {"name": "File System Changes", "description": "Created files and directories", "format": "Files"},
            {"name": "Operation Status", "description": "Success/failure status of operations", "format": "Boolean"}
          ],
          "implementation_details": {
            "key_functions": ["writeOutputFile()", "ensureDirectory()", "fs.readFileSync()", "fs.writeFileSync()"],
            "dependencies": ["fs", "path", "fs-extra"],
            "error_handling": "Comprehensive error checking with descriptive messages",
            "performance_considerations": "Synchronous operations for reliability, batch operations where possible"
          }
        }
      }
    }
  ],
  "hierarchy": {
    "cli-interface": [
      "architecture-doc-generator"
    ],
    "architecture-doc-generator": [
      "data-loader-validator",
      "template-processor", 
      "file-operations-manager"
    ],
    "template-processor": [
      "visualization-engine",
      "theme-management",
      "component-details-system"
    ]
  },
  "edges": [
    {
      "id": "cli-to-generator",
      "source": "cli-interface",
      "target": "architecture-doc-generator",
      "label": "orchestrates"
    },
    {
      "id": "generator-to-loader",
      "source": "architecture-doc-generator",
      "target": "data-loader-validator",
      "label": "validates input"
    },
    {
      "id": "generator-to-processor",
      "source": "architecture-doc-generator",
      "target": "template-processor",
      "label": "processes templates"
    },
    {
      "id": "generator-to-files",
      "source": "architecture-doc-generator",
      "target": "file-operations-manager",
      "label": "manages files"
    },
    {
      "id": "processor-to-visualization",
      "source": "template-processor",
      "target": "visualization-engine",
      "label": "embeds visualization"
    },
    {
      "id": "processor-to-theme",
      "source": "template-processor",
      "target": "theme-management",
      "label": "injects theme system"
    },
    {
      "id": "processor-to-details",
      "source": "template-processor",
      "target": "component-details-system",
      "label": "generates details UI"
    },
    {
      "id": "loader-to-processor",
      "source": "data-loader-validator",
      "target": "template-processor",
      "label": "provides validated data"
    },
    {
      "id": "files-to-processor",
      "source": "file-operations-manager",
      "target": "template-processor",
      "label": "loads templates"
    },
    {
      "id": "processor-to-files-output",
      "source": "template-processor",
      "target": "file-operations-manager",
      "label": "writes generated HTML"
    }
  ],
  "details": {
    "cli-interface": {
      "summary": "Command-line interface and main entry point for the architecture documentation generator",
      "signature": "node generate.js <input.json> <output.html>",
      "working": "Parses command-line arguments, validates input parameters, displays help information, and orchestrates the entire documentation generation process. Handles error conditions gracefully and provides user feedback throughout the generation process.",
      "inputs": [
        {"name": "Input JSON Path", "description": "Path to architecture JSON definition file", "format": "String"},
        {"name": "Output HTML Path", "description": "Destination path for generated HTML file", "format": "String"},
        {"name": "CLI Flags", "description": "Help and option flags", "format": "Array"}
      ],
      "outputs": [
        {"name": "Process Exit Code", "description": "Success (0) or error (1) exit codes", "format": "Number"},
        {"name": "Console Output", "description": "Progress messages and error information", "format": "String"}
      ],
      "imports": ["process.argv", "console"]
    },
    "architecture-doc-generator": {
      "summary": "Core orchestration class that coordinates the entire documentation generation pipeline",
      "signature": "class ArchitectureDocGenerator { async generate(jsonPath, outputPath) }",
      "working": "Main controller that orchestrates the complete documentation generation workflow. Initializes directory structure, coordinates data loading, template processing, HTML generation, and file output. Manages error handling and provides comprehensive logging throughout the process.",
      "inputs": [
        {"name": "JSON File Path", "description": "Path to input architecture definition", "format": "String"},
        {"name": "Output Path", "description": "Destination for generated HTML files", "format": "String"}
      ],
      "outputs": [
        {"name": "HTML Files", "description": "Generated architecture and documentation HTML files", "format": "HTML"},
        {"name": "Console Logs", "description": "Progress and completion messages", "format": "String"}
      ],
      "imports": ["fs", "path"]
    },
    "data-loader-validator": {
      "summary": "Handles architecture JSON file loading, parsing, and comprehensive schema validation",
      "signature": "loadArchitectureData(jsonPath) -> Object, validateArchitectureData(data) -> void",
      "working": "Reads JSON files from disk, parses content with error handling, and performs extensive validation of the architecture data structure. Validates required fields, node references, edge consistency, and hierarchy integrity. Provides detailed error messages for debugging invalid data structures.",
      "inputs": [
        {"name": "JSON File Path", "description": "File system path to architecture JSON", "format": "String"},
        {"name": "Raw JSON Content", "description": "String content from file", "format": "String"}
      ],
      "outputs": [
        {"name": "Validated Data Object", "description": "Parsed and validated architecture data", "format": "Object"},
        {"name": "Validation Errors", "description": "Detailed error messages for invalid data", "format": "Error"}
      ],
      "imports": ["fs", "JSON", "Error handling"]
    },
    "template-processor": {
      "summary": "Core template processing system that merges JSON architecture data with HTML templates",
      "signature": "loadTemplates() -> Object, generateHTML(data, templates) -> String",
      "working": "Loads HTML templates from the templates/ directory, performs placeholder replacement using template literals, injects CSS/JavaScript assets, and generates complete self-contained HTML files. Handles both main visualization view and detailed documentation pages with dynamic content injection.",
      "inputs": [
        {"name": "Template Files", "description": "HTML template files with placeholders", "format": "HTML"},
        {"name": "Architecture Data", "description": "Validated JSON architecture definition", "format": "Object"},
        {"name": "Asset Files", "description": "CSS and JavaScript assets", "format": "String"}
      ],
      "outputs": [
        {"name": "Generated HTML", "description": "Complete HTML files with embedded assets", "format": "HTML"},
        {"name": "Documentation HTML", "description": "Detailed component documentation pages", "format": "HTML"}
      ],
      "imports": ["fs", "path", "String methods"]
    },
    "visualization-engine": {
      "summary": "Interactive graph visualization system powered by Cytoscape.js with hierarchical navigation",
      "signature": "class ArchitectureViewer { constructor(containerId, data) }",
      "working": "Creates interactive graph visualizations using Cytoscape.js with Dagre layout algorithms. Provides hierarchical navigation, component interaction, hover effects, and progressive disclosure. Manages graph state, handles user interactions, and updates the UI dynamically based on user actions.",
      "inputs": [
        {"name": "Architecture Data", "description": "JSON data embedded in HTML", "format": "Object"},
        {"name": "Container Element", "description": "DOM element for graph rendering", "format": "HTMLElement"},
        {"name": "User Interactions", "description": "Mouse and keyboard events", "format": "Events"}
      ],
      "outputs": [
        {"name": "Interactive Graph", "description": "Rendered Cytoscape.js visualization", "format": "Visual"},
        {"name": "State Updates", "description": "UI state changes and navigation updates", "format": "DOM"}
      ],
      "imports": ["Cytoscape.js", "cytoscapeDagre", "DOM APIs"]
    },
    "theme-management": {
      "summary": "Dark/light theme system with user preference persistence and dynamic styling",
      "signature": "toggleTheme() -> void, CSS custom properties",
      "working": "Manages application theming through CSS custom properties and data attributes. Provides seamless dark/light mode switching with user preference persistence in localStorage. Dynamically updates colors, styles, and visual elements across the entire application interface.",
      "inputs": [
        {"name": "User Theme Toggle", "description": "Theme switch user interactions", "format": "Event"},
        {"name": "Stored Preferences", "description": "Previously saved theme preferences", "format": "String"}
      ],
      "outputs": [
        {"name": "Theme State", "description": "Applied theme configuration", "format": "CSS"},
        {"name": "Visual Updates", "description": "Updated interface appearance", "format": "DOM"}
      ],
      "imports": ["localStorage", "CSS custom properties", "document.documentElement"]
    },
    "component-details-system": {
      "summary": "Dynamic sidebar system that displays detailed component information and navigation",
      "signature": "updateComponentDetails(component) -> void, generateComponentHTML(details) -> String",
      "working": "Manages the sidebar interface that shows detailed information about selected or hovered components. Dynamically generates HTML content for component details, handles navigation breadcrumbs, and provides interactive component exploration with formatted display of technical specifications.",
      "inputs": [
        {"name": "Component Data", "description": "Selected component information", "format": "Object"},
        {"name": "Navigation State", "description": "Current navigation path", "format": "Array"},
        {"name": "User Interactions", "description": "Component selection events", "format": "Events"}
      ],
      "outputs": [
        {"name": "Sidebar Content", "description": "Formatted component details HTML", "format": "HTML"},
        {"name": "Navigation UI", "description": "Updated breadcrumb and controls", "format": "DOM"}
      ],
      "imports": ["DOM APIs", "Template rendering", "Event handling"]
    },
    "file-operations-manager": {
      "summary": "Handles all file system operations including reading, writing, and directory management",
      "signature": "writeOutputFile(path, content) -> void, ensureDirectory(path) -> void",
      "working": "Manages all file system interactions including template loading, output file writing, and directory creation. Ensures proper file handling with error checking, creates necessary directory structures, and optimizes file output with size tracking and validation.",
      "inputs": [
        {"name": "File Paths", "description": "Input and output file system paths", "format": "String"},
        {"name": "File Content", "description": "Data to write to files", "format": "String/Buffer"},
        {"name": "Directory Paths", "description": "Directories to create or validate", "format": "String"}
      ],
      "outputs": [
        {"name": "File System Changes", "description": "Created files and directories", "format": "Files"},
        {"name": "Operation Status", "description": "Success/failure status of operations", "format": "Boolean"}
      ],
      "imports": ["fs", "path", "fs-extra"]
    }
  }
}
